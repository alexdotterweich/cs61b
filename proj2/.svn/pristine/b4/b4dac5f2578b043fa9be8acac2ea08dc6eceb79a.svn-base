package jump61;

import java.util.ArrayList;
import java.util.Stack;

import static jump61.Side.*;
import static jump61.Square.square;

//import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

/** A Jump61 board state that may be modified.
 *  @author Alex Dotterweich
 */
class MutableBoard extends Board {
	/** Records size of N x N board. */
    private int N;

	/** An N x N board in initial configuration. */
   MutableBoard(int N) {
	   if (N > 1 && N <= 10) {
		   this.N = N;
       for (int r = 0; r < N * N; r += 1) {
    	   Square i = square(WHITE, 1);
    	   _boardElems.add(i);
    	   } markUndo();
       } else {
    	   GameException.error("Board size is too small.");
       }
   }

    /** A board whose initial contents are copied from BOARD0, but whose
     *  undo history is clear. */
    MutableBoard(Board board0) {
    	for (int i = 0; i < Math.pow(board0.size(), 2); i += 1) {
    		_boardElems.add(i, board0.get(i));
    	}
    }
    
    @Override
    void clear(int N) {
    	_boardElems.clear();
    	if (N > 1 && N <= 10) {
    		this.N = N;
        	_boardElems = new ArrayList<Square>();
        	for (int r = 0; r < N * N; r += 1) {
        		Square i = square(WHITE, 1);
        		_boardElems.add(i);
        	}
        } else {
        	GameException.error("Board size is too small.");
        }
        announce();
    }

    @Override
    void copy(Board board) {
    	for (int i = 0; i < Math.pow(board.size(), 2); i += 1) {
    		_boardElems.add(i, board.get(i));
    	}
    }

    /** Copy the contents of BOARD into me, without modifying my undo
     *  history.  Assumes BOARD and I have the same size. */
    private void internalCopy(MutableBoard board) {
        MutableBoard c = new MutableBoard(board);
    }

    @Override
    int size() {
        return N;
    }

    @Override
    Square get(int n) {
        return _boardElems.get(n);
    }

    @Override
    int numOfSide(Side side) {
    	int numSide = 0;
        for (Square i : _boardElems) {
        	if (i.getSide().equals(side)) {
        		numSide += 1;
        	}
        } return numSide;
    }

    @Override
    int numPieces() {
    	int numSpots = 0;
        for (Square i : _boardElems) {
        	numSpots += i.getSpots();
        } return numSpots;
    }

    @Override
    void addSpot(Side player, int r, int c) {
    	if (isLegal(player)) {
    		addSpot(player, sqNum(r, c));
    	}
    	announce();
    }

    @Override
    void addSpot(Side player, int n) {
        this.toString();
        addSpotHelper(player, n);
        markUndo();
        announce();     
    }
    
    /** Add a spot from PLAYER at square N. */
    void addSpotHelper(Side player, int n) {
    	Square origSq = _boardElems.get(n);
    	int spots = origSq.getSpots();
    	int spotsCount = spots;
   		if (spots == neighbors(n)) {
   			Square restartSq = Square.square(player, 1);
   			_boardElems.set(n, restartSq);
    		while (spotsCount > 1) {
    			getNeighbor(player, n);
    			spotsCount -= 1;
    		}	
    	} else {
    		int origSqSC = origSq.getSpots() + 1;
       		Square newOrigSq = Square.square(player, origSqSC);
      		_boardElems.set(n, newOrigSq);
   		}	
    }

    /** Adds spots from PLAYER to neighboring squares
      * if square N becomes over-full. */
    void getNeighbor(Side player, int n) {
    	int size = size();
        if (row(n) > 1) {
            addSpotHelper(player, size - n);
        }
        if (col(n) > 1) {
        	addSpotHelper(player, n - 1);
        }
        if (row(n) < size) {
        	addSpotHelper(player, n + size);
        }
        if (col(n) < size) {
        	addSpotHelper(player, n + 1);
        }
    }

    @Override
    void set(int r, int c, int num, Side player) {
        internalSet(sqNum(r, c), square(player, num));
    }

    @Override
    void set(int n, int num, Side player) {
        internalSet(n, square(player, num));
        announce();
    }

    @Override
    void undo() {
    	boardStack.pop();
    	MutableBoard newBoard = boardStack.peek();
    	copy(newBoard);
    	_boardElems = newBoard._boardElems;
    }

    /** Record the beginning of a move in the undo history. */
    private void markUndo() {
    	ConstantBoard C = new ConstantBoard(this);
    	MutableBoard D = new MutableBoard(C);
    	boardStack.push(D);
    }

    /** Set the contents of the square with index IND to SQ. Update counts
     *  of numbers of squares of each color.  */
    private void internalSet(int ind, Square sq) {
		_boardElems.set(ind, sq);
		
    }

    /** Notify all Observers of a change. */
    private void announce() {
        setChanged();
        notifyObservers();
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof MutableBoard)) {
            return obj.equals(this);
        } else {
//            return (obj.hashCode && obj.equals(this));
             return false;
        }
    }

    @Override
    public int hashCode() {
        return 0;
    }
 
    /** A stack of ConstantBoard objects. */
    private Stack<MutableBoard> boardStack = new Stack<MutableBoard>();
    
    /** An ArrayList of squares that represents the board. */
    private ArrayList<Square> _boardElems = new ArrayList<Square>();

}
