package graph;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

import graph.DepthFirstTraversal;
import graph.DirectedGraph;
import graph.Graph;
import graph.Traversal;

import org.junit.Test;

import static org.junit.Assert.*;

/** Unit tests for the Graph class.
*  @author AlexDotterweich
*/
public class TraversalTesting {

    @Test
    public void breathFirstTraversal() {
        DirectedGraph g = new DirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add(1, 2);
        g.add(1, 3);
        g.add(2, 4);
        g.add(2, 5);
        depthFirstTester d = new depthFirstTester(g);
        d.traverse(1);
        ArrayList<Integer> t1 =
                new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        ArrayList<Integer> t2 =
                new ArrayList<Integer>(Arrays.asList(1, 2, 3, 5, 4));
        ArrayList<Integer> t3 =
                new ArrayList<Integer>(Arrays.asList(1, 3, 2, 4, 5));
        ArrayList<Integer> t4 =
                new ArrayList<Integer>(Arrays.asList(1, 3, 2, 5, 4));
        assertEquals(true, Equals(t1, d._marked) || Equals(t2, d._marked)
                || Equals(t3, d._marked) || Equals(t4, d._marked));        
    }
    
    @Test
    public void depthFirstTraversal() {
        DirectedGraph g = new DirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add(1, 2);
        g.add(1, 3);
        g.add(2, 4);
        g.add(2, 5);
        depthFirstTester d = new depthFirstTester(g);
        d.traverse(1);
        ArrayList<Integer> t1 =
                new ArrayList<Integer>(Arrays.asList(1, 2, 4, 5, 3));
        ArrayList<Integer> t2 =
                new ArrayList<Integer>(Arrays.asList(1, 3, 2, 4, 5));
        ArrayList<Integer> t3 =
                new ArrayList<Integer>(Arrays.asList(1, 2, 5, 4, 3));
        ArrayList<Integer> t4 =
                new ArrayList<Integer>(Arrays.asList(1, 3, 2, 5, 4));
        assertEquals(true, Equals(t1, d._marked) || Equals(t2, d._marked)
                || Equals(t3, d._marked) || Equals(t4, d._marked));        
    }

    /** Sees if two ArrayLists are identical. */
    private Boolean Equals(ArrayList<Integer> t, ArrayList<Integer> m) {
        int howMany = 0;
        for (int i = 0; i < t.size(); i += 1) {
            if (t.get(i) == m.get(i))
               howMany += 1;
        }
        if (howMany == t.size()) {
            return true;
        }
        return false;
    }

    public class depthFirstTester extends DepthFirstTraversal{
        /** A depth-first Traversal of G, using FRINGE as the fringe. */
        protected depthFirstTester (Graph G) {
            super(G);
        }

        @Override
        protected boolean visit(int v) {     
            return super.visit(v);
        }

        @Override
        protected boolean postVisit(int v) {
            return super.postVisit(v);
        }
    }

    public class breathFirstTester extends BreadthFirstTraversal {
        /** A depth-first Traversal of G, using FRINGE as the fringe. */
        protected breathFirstTester(Graph G) {
            super(G);
        }

        @Override
        protected boolean visit(int v) {
            return super.visit(v);
        }

    }
}
